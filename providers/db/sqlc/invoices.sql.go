// Code generated by sqlc. DO NOT EDIT.
// source: invoices.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/tabbed/pqtype"
)

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM invoices
WHERE id = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getInvoice = `-- name: GetInvoice :one
SELECT id, owner_id, user_id, number, ar_id, status, amount, amount_paid, date, due_date, additional_info, payment_id, discount_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, period_id, class_program_id, class_level_id, class_specialization_id, male, recurring_type, recurring_period, installment, mutation, boarding, admission_line_id, admission_batch_id FROM invoices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvoice(ctx context.Context, id int32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoice, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.ArID,
		&i.Status,
		&i.Amount,
		&i.AmountPaid,
		&i.Date,
		&i.DueDate,
		&i.AdditionalInfo,
		&i.PaymentID,
		&i.DiscountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.PeriodID,
		&i.ClassProgramID,
		&i.ClassLevelID,
		&i.ClassSpecializationID,
		&i.Male,
		&i.RecurringType,
		&i.RecurringPeriod,
		&i.Installment,
		&i.Mutation,
		&i.Boarding,
		&i.AdmissionLineID,
		&i.AdmissionBatchID,
	)
	return i, err
}

const getInvoiceForUpdate = `-- name: GetInvoiceForUpdate :one
SELECT id, owner_id, user_id, number, ar_id, status, amount, amount_paid, date, due_date, additional_info, payment_id, discount_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, period_id, class_program_id, class_level_id, class_specialization_id, male, recurring_type, recurring_period, installment, mutation, boarding, admission_line_id, admission_batch_id FROM invoices
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetInvoiceForUpdate(ctx context.Context, id int32) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceForUpdate, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.ArID,
		&i.Status,
		&i.Amount,
		&i.AmountPaid,
		&i.Date,
		&i.DueDate,
		&i.AdditionalInfo,
		&i.PaymentID,
		&i.DiscountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.PeriodID,
		&i.ClassProgramID,
		&i.ClassLevelID,
		&i.ClassSpecializationID,
		&i.Male,
		&i.RecurringType,
		&i.RecurringPeriod,
		&i.Installment,
		&i.Mutation,
		&i.Boarding,
		&i.AdmissionLineID,
		&i.AdmissionBatchID,
	)
	return i, err
}

const listInvoices = `-- name: ListInvoices :many
SELECT id, owner_id, user_id, number, ar_id, status, amount, amount_paid, date, due_date, additional_info, payment_id, discount_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, period_id, class_program_id, class_level_id, class_specialization_id, male, recurring_type, recurring_period, installment, mutation, boarding, admission_line_id, admission_batch_id FROM invoices
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListInvoicesParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListInvoices(ctx context.Context, arg ListInvoicesParams) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, listInvoices, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UserID,
			&i.Number,
			&i.ArID,
			&i.Status,
			&i.Amount,
			&i.AmountPaid,
			&i.Date,
			&i.DueDate,
			&i.AdditionalInfo,
			&i.PaymentID,
			&i.DiscountID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
			&i.PeriodID,
			&i.ClassProgramID,
			&i.ClassLevelID,
			&i.ClassSpecializationID,
			&i.Male,
			&i.RecurringType,
			&i.RecurringPeriod,
			&i.Installment,
			&i.Mutation,
			&i.Boarding,
			&i.AdmissionLineID,
			&i.AdmissionBatchID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvoice = `-- name: UpdateInvoice :one
UPDATE invoices
SET owner_id=$2, 
    user_id=$3, 
    "number"=$4, 
    ar_id=$5, 
    status=$6, 
    amount=$7, 
    amount_paid=$8, 
    "date"=$9, 
    due_date=$10, 
    additional_info=$11, 
    payment_id=$12, 
    discount_id=$13,
    period_id=$14, 
    class_program_id=$15, 
    class_level_id=$16, 
    class_specialization_id=$17, 
    male=$18, 
    recurring_type=$19, 
    recurring_period=$20, 
    installment=$21, 
    mutation=$22, 
    boarding=$23, 
    admission_line_id=$24, 
    admission_batch_id=$25,
    updated_at=now(),
    updated_by=$26
WHERE id = $1
RETURNING id, owner_id, user_id, number, ar_id, status, amount, amount_paid, date, due_date, additional_info, payment_id, discount_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by, period_id, class_program_id, class_level_id, class_specialization_id, male, recurring_type, recurring_period, installment, mutation, boarding, admission_line_id, admission_batch_id
`

type UpdateInvoiceParams struct {
	ID                    int32                 `json:"id"`
	OwnerID               int32                 `json:"owner_id"`
	UserID                int32                 `json:"user_id"`
	Number                string                `json:"number"`
	ArID                  int32                 `json:"ar_id"`
	Status                int16                 `json:"status"`
	Amount                string                `json:"amount"`
	AmountPaid            string                `json:"amount_paid"`
	Date                  time.Time             `json:"date"`
	DueDate               time.Time             `json:"due_date"`
	AdditionalInfo        pqtype.NullRawMessage `json:"additional_info"`
	PaymentID             sql.NullInt32         `json:"payment_id"`
	DiscountID            sql.NullInt32         `json:"discount_id"`
	PeriodID              sql.NullInt32         `json:"period_id"`
	ClassProgramID        sql.NullInt32         `json:"class_program_id"`
	ClassLevelID          sql.NullInt32         `json:"class_level_id"`
	ClassSpecializationID sql.NullInt32         `json:"class_specialization_id"`
	Male                  sql.NullBool          `json:"male"`
	RecurringType         int16                 `json:"recurring_type"`
	RecurringPeriod       int16                 `json:"recurring_period"`
	Installment           int16                 `json:"installment"`
	Mutation              sql.NullBool          `json:"mutation"`
	Boarding              sql.NullBool          `json:"boarding"`
	AdmissionLineID       int16                 `json:"admission_line_id"`
	AdmissionBatchID      int16                 `json:"admission_batch_id"`
	UpdatedBy             int32                 `json:"updated_by"`
}

func (q *Queries) UpdateInvoice(ctx context.Context, arg UpdateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoice,
		arg.ID,
		arg.OwnerID,
		arg.UserID,
		arg.Number,
		arg.ArID,
		arg.Status,
		arg.Amount,
		arg.AmountPaid,
		arg.Date,
		arg.DueDate,
		arg.AdditionalInfo,
		arg.PaymentID,
		arg.DiscountID,
		arg.PeriodID,
		arg.ClassProgramID,
		arg.ClassLevelID,
		arg.ClassSpecializationID,
		arg.Male,
		arg.RecurringType,
		arg.RecurringPeriod,
		arg.Installment,
		arg.Mutation,
		arg.Boarding,
		arg.AdmissionLineID,
		arg.AdmissionBatchID,
		arg.UpdatedBy,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.ArID,
		&i.Status,
		&i.Amount,
		&i.AmountPaid,
		&i.Date,
		&i.DueDate,
		&i.AdditionalInfo,
		&i.PaymentID,
		&i.DiscountID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
		&i.PeriodID,
		&i.ClassProgramID,
		&i.ClassLevelID,
		&i.ClassSpecializationID,
		&i.Male,
		&i.RecurringType,
		&i.RecurringPeriod,
		&i.Installment,
		&i.Mutation,
		&i.Boarding,
		&i.AdmissionLineID,
		&i.AdmissionBatchID,
	)
	return i, err
}
