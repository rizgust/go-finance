// Code generated by sqlc. DO NOT EDIT.
// source: account_payable_rules.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createAccountPayableRule = `-- name: CreateAccountPayableRule :one
INSERT INTO account_payable_rules (
    owner_id, 
    ap_id, 
    period_id,
    "rule",
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6
) RETURNING id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateAccountPayableRuleParams struct {
	OwnerID   int32           `json:"owner_id"`
	ApID      int32           `json:"ap_id"`
	PeriodID  int32           `json:"period_id"`
	Rule      json.RawMessage `json:"rule"`
	CreatedBy int32           `json:"created_by"`
	UpdatedBy int32           `json:"updated_by"`
}

func (q *Queries) CreateAccountPayableRule(ctx context.Context, arg CreateAccountPayableRuleParams) (AccountPayableRule, error) {
	row := q.db.QueryRowContext(ctx, createAccountPayableRule,
		arg.OwnerID,
		arg.ApID,
		arg.PeriodID,
		arg.Rule,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i AccountPayableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ApID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteAccountPayableRule = `-- name: DeleteAccountPayableRule :exec
UPDATE account_payable_rules
SET deleted_at=now(),
    deleted_by=$2
WHERE id = $1
RETURNING id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type DeleteAccountPayableRuleParams struct {
	ID        int32         `json:"id"`
	DeletedBy sql.NullInt32 `json:"deleted_by"`
}

func (q *Queries) DeleteAccountPayableRule(ctx context.Context, arg DeleteAccountPayableRuleParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccountPayableRule, arg.ID, arg.DeletedBy)
	return err
}

const getAccountPayableRule = `-- name: GetAccountPayableRule :one
SELECT id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_payable_rules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountPayableRule(ctx context.Context, id int32) (AccountPayableRule, error) {
	row := q.db.QueryRowContext(ctx, getAccountPayableRule, id)
	var i AccountPayableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ApID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getAccountPayableRuleForUpdate = `-- name: GetAccountPayableRuleForUpdate :one
SELECT id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_payable_rules
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountPayableRuleForUpdate(ctx context.Context, id int32) (AccountPayableRule, error) {
	row := q.db.QueryRowContext(ctx, getAccountPayableRuleForUpdate, id)
	var i AccountPayableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ApID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listAccountPayableRules = `-- name: ListAccountPayableRules :many
SELECT id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_payable_rules
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountPayableRulesParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAccountPayableRules(ctx context.Context, arg ListAccountPayableRulesParams) ([]AccountPayableRule, error) {
	rows, err := q.db.QueryContext(ctx, listAccountPayableRules, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountPayableRule
	for rows.Next() {
		var i AccountPayableRule
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ApID,
			&i.PeriodID,
			&i.Rule,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountPayableRule = `-- name: UpdateAccountPayableRule :one
UPDATE account_payable_rules
SET owner_id=$2, 
    ap_id=$3, 
    period_id=$4, 
    "rule"=$5,
    updated_at=now(),
    updated_by=$6
WHERE id = $1
RETURNING id, owner_id, ap_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateAccountPayableRuleParams struct {
	ID        int32           `json:"id"`
	OwnerID   int32           `json:"owner_id"`
	ApID      int32           `json:"ap_id"`
	PeriodID  int32           `json:"period_id"`
	Rule      json.RawMessage `json:"rule"`
	UpdatedBy int32           `json:"updated_by"`
}

func (q *Queries) UpdateAccountPayableRule(ctx context.Context, arg UpdateAccountPayableRuleParams) (AccountPayableRule, error) {
	row := q.db.QueryRowContext(ctx, updateAccountPayableRule,
		arg.ID,
		arg.OwnerID,
		arg.ApID,
		arg.PeriodID,
		arg.Rule,
		arg.UpdatedBy,
	)
	var i AccountPayableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ApID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
