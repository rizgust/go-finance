// Code generated by sqlc. DO NOT EDIT.
// source: trx_receives.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const deleteTrxReceive = `-- name: DeleteTrxReceive :exec
DELETE FROM trx_receives
WHERE id = $1
`

func (q *Queries) DeleteTrxReceive(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTrxReceive, id)
	return err
}

const getTrxReceive = `-- name: GetTrxReceive :one
SELECT id, owner_id, user_id, number, amount, date, status, description, payment_method, created_at, created_by, updated_at, updated_by, journal_id FROM trx_receives
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrxReceive(ctx context.Context, id int32) (TrxReceife, error) {
	row := q.db.QueryRowContext(ctx, getTrxReceive, id)
	var i TrxReceife
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.Amount,
		&i.Date,
		&i.Status,
		&i.Description,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.JournalID,
	)
	return i, err
}

const getTrxReceiveForUpdate = `-- name: GetTrxReceiveForUpdate :one
SELECT id, owner_id, user_id, number, amount, date, status, description, payment_method, created_at, created_by, updated_at, updated_by, journal_id FROM trx_receives
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTrxReceiveForUpdate(ctx context.Context, id int32) (TrxReceife, error) {
	row := q.db.QueryRowContext(ctx, getTrxReceiveForUpdate, id)
	var i TrxReceife
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.Amount,
		&i.Date,
		&i.Status,
		&i.Description,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.JournalID,
	)
	return i, err
}

const listTrxReceives = `-- name: ListTrxReceives :many
SELECT id, owner_id, user_id, number, amount, date, status, description, payment_method, created_at, created_by, updated_at, updated_by, journal_id FROM trx_receives
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTrxReceivesParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListTrxReceives(ctx context.Context, arg ListTrxReceivesParams) ([]TrxReceife, error) {
	rows, err := q.db.QueryContext(ctx, listTrxReceives, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrxReceife
	for rows.Next() {
		var i TrxReceife
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UserID,
			&i.Number,
			&i.Amount,
			&i.Date,
			&i.Status,
			&i.Description,
			&i.PaymentMethod,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.JournalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrxReceive = `-- name: UpdateTrxReceive :one
UPDATE trx_receives
SET owner_id=$2, 
    user_id=$3, 
    "number"=$4, 
    amount=$5, 
    "date"=$6, 
    status=$7, 
    description=$8,
    payment_method=$9,
    journal_id=$10,
    updated_at=now(),
    updated_by=$11
WHERE id = $1
RETURNING id, owner_id, user_id, number, amount, date, status, description, payment_method, created_at, created_by, updated_at, updated_by, journal_id
`

type UpdateTrxReceiveParams struct {
	ID            int32          `json:"id"`
	OwnerID       int32          `json:"owner_id"`
	UserID        int32          `json:"user_id"`
	Number        sql.NullString `json:"number"`
	Amount        string         `json:"amount"`
	Date          time.Time      `json:"date"`
	Status        int16          `json:"status"`
	Description   sql.NullString `json:"description"`
	PaymentMethod int16          `json:"payment_method"`
	JournalID     sql.NullInt32  `json:"journal_id"`
	UpdatedBy     int32          `json:"updated_by"`
}

func (q *Queries) UpdateTrxReceive(ctx context.Context, arg UpdateTrxReceiveParams) (TrxReceife, error) {
	row := q.db.QueryRowContext(ctx, updateTrxReceive,
		arg.ID,
		arg.OwnerID,
		arg.UserID,
		arg.Number,
		arg.Amount,
		arg.Date,
		arg.Status,
		arg.Description,
		arg.PaymentMethod,
		arg.JournalID,
		arg.UpdatedBy,
	)
	var i TrxReceife
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Number,
		&i.Amount,
		&i.Date,
		&i.Status,
		&i.Description,
		&i.PaymentMethod,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.JournalID,
	)
	return i, err
}
