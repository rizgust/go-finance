// Code generated by sqlc. DO NOT EDIT.
// source: general_ledgers.sql

package db

import (
	"context"
	"database/sql"
)

const createGeneralLedger = `-- name: CreateGeneralLedger :one
INSERT INTO general_ledger_details (
    owner_id, 
    general_ledger_id, 
    account_id, 
    debit, 
    credit, 
    balance_before, 
    balance, 
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateGeneralLedgerParams struct {
	OwnerID         int32  `json:"owner_id"`
	GeneralLedgerID int32  `json:"general_ledger_id"`
	AccountID       int32  `json:"account_id"`
	Debit           string `json:"debit"`
	Credit          string `json:"credit"`
	BalanceBefore   string `json:"balance_before"`
	Balance         string `json:"balance"`
	CreatedBy       int32  `json:"created_by"`
	UpdatedBy       int32  `json:"updated_by"`
}

func (q *Queries) CreateGeneralLedger(ctx context.Context, arg CreateGeneralLedgerParams) (GeneralLedgerDetail, error) {
	row := q.db.QueryRowContext(ctx, createGeneralLedger,
		arg.OwnerID,
		arg.GeneralLedgerID,
		arg.AccountID,
		arg.Debit,
		arg.Credit,
		arg.BalanceBefore,
		arg.Balance,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i GeneralLedgerDetail
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.GeneralLedgerID,
		&i.AccountID,
		&i.Debit,
		&i.Credit,
		&i.BalanceBefore,
		&i.Balance,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteGeneralLedger = `-- name: DeleteGeneralLedger :exec
UPDATE general_ledger_details
SET deleted_at=now(),
    deleted_by=$2
WHERE id = $1
RETURNING id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type DeleteGeneralLedgerParams struct {
	ID        int32         `json:"id"`
	DeletedBy sql.NullInt32 `json:"deleted_by"`
}

func (q *Queries) DeleteGeneralLedger(ctx context.Context, arg DeleteGeneralLedgerParams) error {
	_, err := q.db.ExecContext(ctx, deleteGeneralLedger, arg.ID, arg.DeletedBy)
	return err
}

const getGeneralLedger = `-- name: GetGeneralLedger :one
SELECT id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM general_ledger_details
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGeneralLedger(ctx context.Context, id int32) (GeneralLedgerDetail, error) {
	row := q.db.QueryRowContext(ctx, getGeneralLedger, id)
	var i GeneralLedgerDetail
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.GeneralLedgerID,
		&i.AccountID,
		&i.Debit,
		&i.Credit,
		&i.BalanceBefore,
		&i.Balance,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getGeneralLedgerForUpdate = `-- name: GetGeneralLedgerForUpdate :one
SELECT id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM general_ledger_details
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetGeneralLedgerForUpdate(ctx context.Context, id int32) (GeneralLedgerDetail, error) {
	row := q.db.QueryRowContext(ctx, getGeneralLedgerForUpdate, id)
	var i GeneralLedgerDetail
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.GeneralLedgerID,
		&i.AccountID,
		&i.Debit,
		&i.Credit,
		&i.BalanceBefore,
		&i.Balance,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listGeneralLedgers = `-- name: ListGeneralLedgers :many
SELECT id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM general_ledger_details
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListGeneralLedgersParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListGeneralLedgers(ctx context.Context, arg ListGeneralLedgersParams) ([]GeneralLedgerDetail, error) {
	rows, err := q.db.QueryContext(ctx, listGeneralLedgers, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GeneralLedgerDetail
	for rows.Next() {
		var i GeneralLedgerDetail
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.GeneralLedgerID,
			&i.AccountID,
			&i.Debit,
			&i.Credit,
			&i.BalanceBefore,
			&i.Balance,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGeneralLedger = `-- name: UpdateGeneralLedger :one
UPDATE general_ledger_details
SET owner_id=$2, 
    general_ledger_id=$3, 
    account_id=$4, 
    debit=$5, 
    credit=$6, 
    balance_before=$7, 
    balance=$8, 
    updated_at=now(),
    updated_by=$9
WHERE id = $1
RETURNING id, owner_id, general_ledger_id, account_id, debit, credit, balance_before, balance, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateGeneralLedgerParams struct {
	ID              int32  `json:"id"`
	OwnerID         int32  `json:"owner_id"`
	GeneralLedgerID int32  `json:"general_ledger_id"`
	AccountID       int32  `json:"account_id"`
	Debit           string `json:"debit"`
	Credit          string `json:"credit"`
	BalanceBefore   string `json:"balance_before"`
	Balance         string `json:"balance"`
	UpdatedBy       int32  `json:"updated_by"`
}

func (q *Queries) UpdateGeneralLedger(ctx context.Context, arg UpdateGeneralLedgerParams) (GeneralLedgerDetail, error) {
	row := q.db.QueryRowContext(ctx, updateGeneralLedger,
		arg.ID,
		arg.OwnerID,
		arg.GeneralLedgerID,
		arg.AccountID,
		arg.Debit,
		arg.Credit,
		arg.BalanceBefore,
		arg.Balance,
		arg.UpdatedBy,
	)
	var i GeneralLedgerDetail
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.GeneralLedgerID,
		&i.AccountID,
		&i.Debit,
		&i.Credit,
		&i.BalanceBefore,
		&i.Balance,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
