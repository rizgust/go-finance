// Code generated by sqlc. DO NOT EDIT.
// source: m_virtual_accounts.sql

package db

import (
	"context"
)

const deleteMVirtualAccount = `-- name: DeleteMVirtualAccount :exec
DELETE FROM m_virtual_accounts
WHERE id = $1
`

func (q *Queries) DeleteMVirtualAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMVirtualAccount, id)
	return err
}

const getMVirtualAccount = `-- name: GetMVirtualAccount :one
SELECT id, owner_id, bank_id, number, created_at, created_by, updated_at, updated_by FROM m_virtual_accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMVirtualAccount(ctx context.Context, id int32) (MVirtualAccount, error) {
	row := q.db.QueryRowContext(ctx, getMVirtualAccount, id)
	var i MVirtualAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getMVirtualAccountForUpdate = `-- name: GetMVirtualAccountForUpdate :one
SELECT id, owner_id, bank_id, number, created_at, created_by, updated_at, updated_by FROM m_virtual_accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMVirtualAccountForUpdate(ctx context.Context, id int32) (MVirtualAccount, error) {
	row := q.db.QueryRowContext(ctx, getMVirtualAccountForUpdate, id)
	var i MVirtualAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listMVirtualAccounts = `-- name: ListMVirtualAccounts :many
SELECT id, owner_id, bank_id, number, created_at, created_by, updated_at, updated_by FROM m_virtual_accounts
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMVirtualAccountsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListMVirtualAccounts(ctx context.Context, arg ListMVirtualAccountsParams) ([]MVirtualAccount, error) {
	rows, err := q.db.QueryContext(ctx, listMVirtualAccounts, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MVirtualAccount
	for rows.Next() {
		var i MVirtualAccount
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.BankID,
			&i.Number,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMVirtualAccount = `-- name: UpdateMVirtualAccount :one
UPDATE m_virtual_accounts
SET owner_id=$2, 
    bank_id=$3, 
    "number"=$4,
    updated_at=now(),
    updated_by=$5
WHERE id = $1
RETURNING id, owner_id, bank_id, number, created_at, created_by, updated_at, updated_by
`

type UpdateMVirtualAccountParams struct {
	ID        int32  `json:"id"`
	OwnerID   int32  `json:"owner_id"`
	BankID    int32  `json:"bank_id"`
	Number    string `json:"number"`
	UpdatedBy int32  `json:"updated_by"`
}

func (q *Queries) UpdateMVirtualAccount(ctx context.Context, arg UpdateMVirtualAccountParams) (MVirtualAccount, error) {
	row := q.db.QueryRowContext(ctx, updateMVirtualAccount,
		arg.ID,
		arg.OwnerID,
		arg.BankID,
		arg.Number,
		arg.UpdatedBy,
	)
	var i MVirtualAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
