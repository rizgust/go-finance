// Code generated by sqlc. DO NOT EDIT.
// source: wallets.sql

package db

import (
	"context"
	"database/sql"

	"github.com/tabbed/pqtype"
)

const createWallet = `-- name: CreateWallet :one
INSERT INTO wallets (
    owner_id, 
    user_id, 
    code, 
    "name", 
    alias, 
    balance, 
    account_id, 
    other_info, 
    allow_minus,
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, owner_id, user_id, code, name, alias, balance, account_id, other_info, allow_minus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateWalletParams struct {
	OwnerID    int32                 `json:"owner_id"`
	UserID     int32                 `json:"user_id"`
	Code       string                `json:"code"`
	Name       string                `json:"name"`
	Alias      sql.NullString        `json:"alias"`
	Balance    string                `json:"balance"`
	AccountID  sql.NullInt32         `json:"account_id"`
	OtherInfo  pqtype.NullRawMessage `json:"other_info"`
	AllowMinus sql.NullBool          `json:"allow_minus"`
	CreatedBy  int32                 `json:"created_by"`
	UpdatedBy  int32                 `json:"updated_by"`
}

func (q *Queries) CreateWallet(ctx context.Context, arg CreateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, createWallet,
		arg.OwnerID,
		arg.UserID,
		arg.Code,
		arg.Name,
		arg.Alias,
		arg.Balance,
		arg.AccountID,
		arg.OtherInfo,
		arg.AllowMinus,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Code,
		&i.Name,
		&i.Alias,
		&i.Balance,
		&i.AccountID,
		&i.OtherInfo,
		&i.AllowMinus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteWallet = `-- name: DeleteWallet :exec
DELETE FROM wallets
WHERE id = $1
`

func (q *Queries) DeleteWallet(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteWallet, id)
	return err
}

const getWallet = `-- name: GetWallet :one
SELECT id, owner_id, user_id, code, name, alias, balance, account_id, other_info, allow_minus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM wallets
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWallet(ctx context.Context, id int32) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWallet, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Code,
		&i.Name,
		&i.Alias,
		&i.Balance,
		&i.AccountID,
		&i.OtherInfo,
		&i.AllowMinus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getWalletForUpdate = `-- name: GetWalletForUpdate :one
SELECT id, owner_id, user_id, code, name, alias, balance, account_id, other_info, allow_minus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM wallets
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetWalletForUpdate(ctx context.Context, id int32) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, getWalletForUpdate, id)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Code,
		&i.Name,
		&i.Alias,
		&i.Balance,
		&i.AccountID,
		&i.OtherInfo,
		&i.AllowMinus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listWallets = `-- name: ListWallets :many
SELECT id, owner_id, user_id, code, name, alias, balance, account_id, other_info, allow_minus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM wallets
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListWalletsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListWallets(ctx context.Context, arg ListWalletsParams) ([]Wallet, error) {
	rows, err := q.db.QueryContext(ctx, listWallets, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wallet
	for rows.Next() {
		var i Wallet
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UserID,
			&i.Code,
			&i.Name,
			&i.Alias,
			&i.Balance,
			&i.AccountID,
			&i.OtherInfo,
			&i.AllowMinus,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWallet = `-- name: UpdateWallet :one
UPDATE wallets
SET owner_id=$2, 
    user_id=$3, 
    code=$4, 
    "name"=$5, 
    alias=$6, 
    balance=$7, 
    account_id=$8, 
    other_info=$9, 
    allow_minus=$10,
    updated_at=now(),
    updated_by=$11
WHERE id = $1
RETURNING id, owner_id, user_id, code, name, alias, balance, account_id, other_info, allow_minus, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateWalletParams struct {
	ID         int32                 `json:"id"`
	OwnerID    int32                 `json:"owner_id"`
	UserID     int32                 `json:"user_id"`
	Code       string                `json:"code"`
	Name       string                `json:"name"`
	Alias      sql.NullString        `json:"alias"`
	Balance    string                `json:"balance"`
	AccountID  sql.NullInt32         `json:"account_id"`
	OtherInfo  pqtype.NullRawMessage `json:"other_info"`
	AllowMinus sql.NullBool          `json:"allow_minus"`
	UpdatedBy  int32                 `json:"updated_by"`
}

func (q *Queries) UpdateWallet(ctx context.Context, arg UpdateWalletParams) (Wallet, error) {
	row := q.db.QueryRowContext(ctx, updateWallet,
		arg.ID,
		arg.OwnerID,
		arg.UserID,
		arg.Code,
		arg.Name,
		arg.Alias,
		arg.Balance,
		arg.AccountID,
		arg.OtherInfo,
		arg.AllowMinus,
		arg.UpdatedBy,
	)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.Code,
		&i.Name,
		&i.Alias,
		&i.Balance,
		&i.AccountID,
		&i.OtherInfo,
		&i.AllowMinus,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
