// Code generated by sqlc. DO NOT EDIT.
// source: journals.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createJournal = `-- name: CreateJournal :one
INSERT INTO journals (
    owner_id, 
    "number", 
    "date", 
    general_ledger_id, 
    status, 
    amount, 
    description, 
    reff_model, 
    reff_model_id,
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, owner_id, number, date, general_ledger_id, status, amount, description, reff_model, reff_model_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateJournalParams struct {
	OwnerID         int32          `json:"owner_id"`
	Number          string         `json:"number"`
	Date            time.Time      `json:"date"`
	GeneralLedgerID sql.NullInt32  `json:"general_ledger_id"`
	Status          int16          `json:"status"`
	Amount          string         `json:"amount"`
	Description     sql.NullString `json:"description"`
	ReffModel       sql.NullString `json:"reff_model"`
	ReffModelID     sql.NullInt32  `json:"reff_model_id"`
	CreatedBy       int32          `json:"created_by"`
	UpdatedBy       int32          `json:"updated_by"`
}

func (q *Queries) CreateJournal(ctx context.Context, arg CreateJournalParams) (Journal, error) {
	row := q.db.QueryRowContext(ctx, createJournal,
		arg.OwnerID,
		arg.Number,
		arg.Date,
		arg.GeneralLedgerID,
		arg.Status,
		arg.Amount,
		arg.Description,
		arg.ReffModel,
		arg.ReffModelID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Number,
		&i.Date,
		&i.GeneralLedgerID,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.ReffModel,
		&i.ReffModelID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteJournal = `-- name: DeleteJournal :exec
DELETE FROM journals
WHERE id = $1
`

func (q *Queries) DeleteJournal(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteJournal, id)
	return err
}

const getJournal = `-- name: GetJournal :one
SELECT id, owner_id, number, date, general_ledger_id, status, amount, description, reff_model, reff_model_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM journals
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetJournal(ctx context.Context, id int32) (Journal, error) {
	row := q.db.QueryRowContext(ctx, getJournal, id)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Number,
		&i.Date,
		&i.GeneralLedgerID,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.ReffModel,
		&i.ReffModelID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getJournalForUpdate = `-- name: GetJournalForUpdate :one
SELECT id, owner_id, number, date, general_ledger_id, status, amount, description, reff_model, reff_model_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM journals
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetJournalForUpdate(ctx context.Context, id int32) (Journal, error) {
	row := q.db.QueryRowContext(ctx, getJournalForUpdate, id)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Number,
		&i.Date,
		&i.GeneralLedgerID,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.ReffModel,
		&i.ReffModelID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listJournals = `-- name: ListJournals :many
SELECT id, owner_id, number, date, general_ledger_id, status, amount, description, reff_model, reff_model_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM journals
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListJournalsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListJournals(ctx context.Context, arg ListJournalsParams) ([]Journal, error) {
	rows, err := q.db.QueryContext(ctx, listJournals, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Journal
	for rows.Next() {
		var i Journal
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Number,
			&i.Date,
			&i.GeneralLedgerID,
			&i.Status,
			&i.Amount,
			&i.Description,
			&i.ReffModel,
			&i.ReffModelID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJournal = `-- name: UpdateJournal :one
UPDATE journals
SET owner_id=$2, 
    "number"=$3, 
    "date"=$4, 
    general_ledger_id=$5, 
    status=$6, 
    amount=$7, 
    description=$8, 
    reff_model=$9, 
    reff_model_id=$10,
    updated_at=now(),
    updated_by=$11
WHERE id = $1
RETURNING id, owner_id, number, date, general_ledger_id, status, amount, description, reff_model, reff_model_id, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateJournalParams struct {
	ID              int32          `json:"id"`
	OwnerID         int32          `json:"owner_id"`
	Number          string         `json:"number"`
	Date            time.Time      `json:"date"`
	GeneralLedgerID sql.NullInt32  `json:"general_ledger_id"`
	Status          int16          `json:"status"`
	Amount          string         `json:"amount"`
	Description     sql.NullString `json:"description"`
	ReffModel       sql.NullString `json:"reff_model"`
	ReffModelID     sql.NullInt32  `json:"reff_model_id"`
	UpdatedBy       int32          `json:"updated_by"`
}

func (q *Queries) UpdateJournal(ctx context.Context, arg UpdateJournalParams) (Journal, error) {
	row := q.db.QueryRowContext(ctx, updateJournal,
		arg.ID,
		arg.OwnerID,
		arg.Number,
		arg.Date,
		arg.GeneralLedgerID,
		arg.Status,
		arg.Amount,
		arg.Description,
		arg.ReffModel,
		arg.ReffModelID,
		arg.UpdatedBy,
	)
	var i Journal
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Number,
		&i.Date,
		&i.GeneralLedgerID,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.ReffModel,
		&i.ReffModelID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
