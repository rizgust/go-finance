// Code generated by sqlc. DO NOT EDIT.
// source: m_discounts.sql

package db

import (
	"context"
	"database/sql"
)

const createMDiscount = `-- name: CreateMDiscount :one
INSERT INTO m_discounts (
    owner_id, 
    code, 
    "name", 
    description, 
    is_active, 
    value, 
    is_percent, 
    start_date, 
    end_date,
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, owner_id, code, name, description, is_active, value, is_percent, start_date, end_date, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateMDiscountParams struct {
	OwnerID     int32          `json:"owner_id"`
	Code        sql.NullString `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	Value       string         `json:"value"`
	IsPercent   bool           `json:"is_percent"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	CreatedBy   int32          `json:"created_by"`
	UpdatedBy   int32          `json:"updated_by"`
}

func (q *Queries) CreateMDiscount(ctx context.Context, arg CreateMDiscountParams) (MDiscount, error) {
	row := q.db.QueryRowContext(ctx, createMDiscount,
		arg.OwnerID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.Value,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i MDiscount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.Value,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteMDiscount = `-- name: DeleteMDiscount :exec
DELETE FROM m_discounts
WHERE id = $1
`

func (q *Queries) DeleteMDiscount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMDiscount, id)
	return err
}

const getMDiscount = `-- name: GetMDiscount :one
SELECT id, owner_id, code, name, description, is_active, value, is_percent, start_date, end_date, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_discounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMDiscount(ctx context.Context, id int32) (MDiscount, error) {
	row := q.db.QueryRowContext(ctx, getMDiscount, id)
	var i MDiscount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.Value,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getMDiscountForUpdate = `-- name: GetMDiscountForUpdate :one
SELECT id, owner_id, code, name, description, is_active, value, is_percent, start_date, end_date, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_discounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMDiscountForUpdate(ctx context.Context, id int32) (MDiscount, error) {
	row := q.db.QueryRowContext(ctx, getMDiscountForUpdate, id)
	var i MDiscount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.Value,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listMDiscounts = `-- name: ListMDiscounts :many
SELECT id, owner_id, code, name, description, is_active, value, is_percent, start_date, end_date, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_discounts
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMDiscountsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListMDiscounts(ctx context.Context, arg ListMDiscountsParams) ([]MDiscount, error) {
	rows, err := q.db.QueryContext(ctx, listMDiscounts, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MDiscount
	for rows.Next() {
		var i MDiscount
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.Value,
			&i.IsPercent,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMDiscount = `-- name: UpdateMDiscount :one
UPDATE m_discounts
SET owner_id=$2, 
    code=$3, 
    "name"=$4, 
    description=$5, 
    is_active=$6, 
    value=$7, 
    is_percent=$8, 
    start_date=$9, 
    end_date=$10,
    updated_at=now(),
    updated_by=$11
WHERE id = $1
RETURNING id, owner_id, code, name, description, is_active, value, is_percent, start_date, end_date, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateMDiscountParams struct {
	ID          int32          `json:"id"`
	OwnerID     int32          `json:"owner_id"`
	Code        sql.NullString `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    bool           `json:"is_active"`
	Value       string         `json:"value"`
	IsPercent   bool           `json:"is_percent"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	UpdatedBy   int32          `json:"updated_by"`
}

func (q *Queries) UpdateMDiscount(ctx context.Context, arg UpdateMDiscountParams) (MDiscount, error) {
	row := q.db.QueryRowContext(ctx, updateMDiscount,
		arg.ID,
		arg.OwnerID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.Value,
		arg.IsPercent,
		arg.StartDate,
		arg.EndDate,
		arg.UpdatedBy,
	)
	var i MDiscount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.Value,
		&i.IsPercent,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
