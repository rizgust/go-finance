// Code generated by sqlc. DO NOT EDIT.
// source: trx_bank_transfers.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/tabbed/pqtype"
)

const createTrxBankTransfer = `-- name: CreateTrxBankTransfer :one
INSERT INTO trx_bank_transfers (
    owner_id, 
    user_id, 
    bank_id, 
    "number", 
    "date", 
    status, 
    amount, 
    description, 
    dest_model, 
    dest_model_id, 
    account_owner, 
    account_number, 
    additional_info, 
    trx_receives_id,
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
) RETURNING id, owner_id, user_id, bank_id, number, date, status, amount, description, dest_model, dest_model_id, account_owner, account_number, additional_info, trx_receives_id, created_at, created_by, updated_at, updated_by
`

type CreateTrxBankTransferParams struct {
	OwnerID        int32                 `json:"owner_id"`
	UserID         int32                 `json:"user_id"`
	BankID         int32                 `json:"bank_id"`
	Number         sql.NullString        `json:"number"`
	Date           time.Time             `json:"date"`
	Status         int16                 `json:"status"`
	Amount         string                `json:"amount"`
	Description    sql.NullString        `json:"description"`
	DestModel      sql.NullString        `json:"dest_model"`
	DestModelID    sql.NullInt32         `json:"dest_model_id"`
	AccountOwner   sql.NullString        `json:"account_owner"`
	AccountNumber  sql.NullString        `json:"account_number"`
	AdditionalInfo pqtype.NullRawMessage `json:"additional_info"`
	TrxReceivesID  int32                 `json:"trx_receives_id"`
	CreatedBy      int32                 `json:"created_by"`
	UpdatedBy      int32                 `json:"updated_by"`
}

func (q *Queries) CreateTrxBankTransfer(ctx context.Context, arg CreateTrxBankTransferParams) (TrxBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, createTrxBankTransfer,
		arg.OwnerID,
		arg.UserID,
		arg.BankID,
		arg.Number,
		arg.Date,
		arg.Status,
		arg.Amount,
		arg.Description,
		arg.DestModel,
		arg.DestModelID,
		arg.AccountOwner,
		arg.AccountNumber,
		arg.AdditionalInfo,
		arg.TrxReceivesID,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i TrxBankTransfer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.BankID,
		&i.Number,
		&i.Date,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.DestModel,
		&i.DestModelID,
		&i.AccountOwner,
		&i.AccountNumber,
		&i.AdditionalInfo,
		&i.TrxReceivesID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteTrxBankTransfer = `-- name: DeleteTrxBankTransfer :exec
DELETE FROM trx_bank_transfers
WHERE id = $1
`

func (q *Queries) DeleteTrxBankTransfer(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTrxBankTransfer, id)
	return err
}

const getTrxBankTransfer = `-- name: GetTrxBankTransfer :one
SELECT id, owner_id, user_id, bank_id, number, date, status, amount, description, dest_model, dest_model_id, account_owner, account_number, additional_info, trx_receives_id, created_at, created_by, updated_at, updated_by FROM trx_bank_transfers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTrxBankTransfer(ctx context.Context, id int32) (TrxBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, getTrxBankTransfer, id)
	var i TrxBankTransfer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.BankID,
		&i.Number,
		&i.Date,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.DestModel,
		&i.DestModelID,
		&i.AccountOwner,
		&i.AccountNumber,
		&i.AdditionalInfo,
		&i.TrxReceivesID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getTrxBankTransferForUpdate = `-- name: GetTrxBankTransferForUpdate :one
SELECT id, owner_id, user_id, bank_id, number, date, status, amount, description, dest_model, dest_model_id, account_owner, account_number, additional_info, trx_receives_id, created_at, created_by, updated_at, updated_by FROM trx_bank_transfers
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetTrxBankTransferForUpdate(ctx context.Context, id int32) (TrxBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, getTrxBankTransferForUpdate, id)
	var i TrxBankTransfer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.BankID,
		&i.Number,
		&i.Date,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.DestModel,
		&i.DestModelID,
		&i.AccountOwner,
		&i.AccountNumber,
		&i.AdditionalInfo,
		&i.TrxReceivesID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listTrxBankTransfers = `-- name: ListTrxBankTransfers :many
SELECT id, owner_id, user_id, bank_id, number, date, status, amount, description, dest_model, dest_model_id, account_owner, account_number, additional_info, trx_receives_id, created_at, created_by, updated_at, updated_by FROM trx_bank_transfers
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListTrxBankTransfersParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListTrxBankTransfers(ctx context.Context, arg ListTrxBankTransfersParams) ([]TrxBankTransfer, error) {
	rows, err := q.db.QueryContext(ctx, listTrxBankTransfers, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrxBankTransfer
	for rows.Next() {
		var i TrxBankTransfer
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.UserID,
			&i.BankID,
			&i.Number,
			&i.Date,
			&i.Status,
			&i.Amount,
			&i.Description,
			&i.DestModel,
			&i.DestModelID,
			&i.AccountOwner,
			&i.AccountNumber,
			&i.AdditionalInfo,
			&i.TrxReceivesID,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTrxBankTransfer = `-- name: UpdateTrxBankTransfer :one
UPDATE trx_bank_transfers
SET owner_id=$2, 
    user_id=$3, 
    bank_id=$4, 
    "number"=$5, 
    "date"=$6, 
    status=$7, 
    amount=$8, 
    description=$9, 
    dest_model=$10, 
    dest_model_id=$11, 
    account_owner=$12, 
    account_number=$13, 
    additional_info=$14, 
    trx_receives_id=$15,
    updated_at=now(),
    updated_by=$16
WHERE id = $1
RETURNING id, owner_id, user_id, bank_id, number, date, status, amount, description, dest_model, dest_model_id, account_owner, account_number, additional_info, trx_receives_id, created_at, created_by, updated_at, updated_by
`

type UpdateTrxBankTransferParams struct {
	ID             int32                 `json:"id"`
	OwnerID        int32                 `json:"owner_id"`
	UserID         int32                 `json:"user_id"`
	BankID         int32                 `json:"bank_id"`
	Number         sql.NullString        `json:"number"`
	Date           time.Time             `json:"date"`
	Status         int16                 `json:"status"`
	Amount         string                `json:"amount"`
	Description    sql.NullString        `json:"description"`
	DestModel      sql.NullString        `json:"dest_model"`
	DestModelID    sql.NullInt32         `json:"dest_model_id"`
	AccountOwner   sql.NullString        `json:"account_owner"`
	AccountNumber  sql.NullString        `json:"account_number"`
	AdditionalInfo pqtype.NullRawMessage `json:"additional_info"`
	TrxReceivesID  int32                 `json:"trx_receives_id"`
	UpdatedBy      int32                 `json:"updated_by"`
}

func (q *Queries) UpdateTrxBankTransfer(ctx context.Context, arg UpdateTrxBankTransferParams) (TrxBankTransfer, error) {
	row := q.db.QueryRowContext(ctx, updateTrxBankTransfer,
		arg.ID,
		arg.OwnerID,
		arg.UserID,
		arg.BankID,
		arg.Number,
		arg.Date,
		arg.Status,
		arg.Amount,
		arg.Description,
		arg.DestModel,
		arg.DestModelID,
		arg.AccountOwner,
		arg.AccountNumber,
		arg.AdditionalInfo,
		arg.TrxReceivesID,
		arg.UpdatedBy,
	)
	var i TrxBankTransfer
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.UserID,
		&i.BankID,
		&i.Number,
		&i.Date,
		&i.Status,
		&i.Amount,
		&i.Description,
		&i.DestModel,
		&i.DestModelID,
		&i.AccountOwner,
		&i.AccountNumber,
		&i.AdditionalInfo,
		&i.TrxReceivesID,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
