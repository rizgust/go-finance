// Code generated by sqlc. DO NOT EDIT.
// source: account_receiveable_rules.sql

package db

import (
	"context"
	"encoding/json"
)

const deleteAccountReceiveableRule = `-- name: DeleteAccountReceiveableRule :exec
DELETE FROM account_receiveable_rules
WHERE id = $1
`

func (q *Queries) DeleteAccountReceiveableRule(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccountReceiveableRule, id)
	return err
}

const getAccountReceiveableRule = `-- name: GetAccountReceiveableRule :one
SELECT id, owner_id, ar_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_receiveable_rules
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccountReceiveableRule(ctx context.Context, id int32) (AccountReceiveableRule, error) {
	row := q.db.QueryRowContext(ctx, getAccountReceiveableRule, id)
	var i AccountReceiveableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ArID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getAccountReceiveableRuleForUpdate = `-- name: GetAccountReceiveableRuleForUpdate :one
SELECT id, owner_id, ar_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_receiveable_rules
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountReceiveableRuleForUpdate(ctx context.Context, id int32) (AccountReceiveableRule, error) {
	row := q.db.QueryRowContext(ctx, getAccountReceiveableRuleForUpdate, id)
	var i AccountReceiveableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ArID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listAccountReceiveableRules = `-- name: ListAccountReceiveableRules :many
SELECT id, owner_id, ar_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM account_receiveable_rules
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountReceiveableRulesParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAccountReceiveableRules(ctx context.Context, arg ListAccountReceiveableRulesParams) ([]AccountReceiveableRule, error) {
	rows, err := q.db.QueryContext(ctx, listAccountReceiveableRules, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AccountReceiveableRule
	for rows.Next() {
		var i AccountReceiveableRule
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.ArID,
			&i.PeriodID,
			&i.Rule,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccountReceiveableRule = `-- name: UpdateAccountReceiveableRule :one
UPDATE account_receiveable_rules
SET owner_id=$2, 
    ar_id=$3, 
    period_id=$4, 
    "rule"=$5,
    updated_at=now(),
    updated_by=$6
WHERE id = $1
RETURNING id, owner_id, ar_id, period_id, rule, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateAccountReceiveableRuleParams struct {
	ID        int32           `json:"id"`
	OwnerID   int32           `json:"owner_id"`
	ArID      int32           `json:"ar_id"`
	PeriodID  int32           `json:"period_id"`
	Rule      json.RawMessage `json:"rule"`
	UpdatedBy int32           `json:"updated_by"`
}

func (q *Queries) UpdateAccountReceiveableRule(ctx context.Context, arg UpdateAccountReceiveableRuleParams) (AccountReceiveableRule, error) {
	row := q.db.QueryRowContext(ctx, updateAccountReceiveableRule,
		arg.ID,
		arg.OwnerID,
		arg.ArID,
		arg.PeriodID,
		arg.Rule,
		arg.UpdatedBy,
	)
	var i AccountReceiveableRule
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.ArID,
		&i.PeriodID,
		&i.Rule,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
