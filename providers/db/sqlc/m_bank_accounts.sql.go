// Code generated by sqlc. DO NOT EDIT.
// source: m_bank_accounts.sql

package db

import (
	"context"
)

const deleteMBankAccount = `-- name: DeleteMBankAccount :exec
DELETE FROM m_bank_accounts
WHERE id = $1
`

func (q *Queries) DeleteMBankAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMBankAccount, id)
	return err
}

const getMBankAccount = `-- name: GetMBankAccount :one
SELECT id, owner_id, bank_id, branch_name, name, number, created_at, created_by, updated_at, updated_by FROM m_bank_accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMBankAccount(ctx context.Context, id int32) (MBankAccount, error) {
	row := q.db.QueryRowContext(ctx, getMBankAccount, id)
	var i MBankAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.BranchName,
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const getMBankAccountForUpdate = `-- name: GetMBankAccountForUpdate :one
SELECT id, owner_id, bank_id, branch_name, name, number, created_at, created_by, updated_at, updated_by FROM m_bank_accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMBankAccountForUpdate(ctx context.Context, id int32) (MBankAccount, error) {
	row := q.db.QueryRowContext(ctx, getMBankAccountForUpdate, id)
	var i MBankAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.BranchName,
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}

const listMBankAccounts = `-- name: ListMBankAccounts :many
SELECT id, owner_id, bank_id, branch_name, name, number, created_at, created_by, updated_at, updated_by FROM m_bank_accounts
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMBankAccountsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListMBankAccounts(ctx context.Context, arg ListMBankAccountsParams) ([]MBankAccount, error) {
	rows, err := q.db.QueryContext(ctx, listMBankAccounts, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MBankAccount
	for rows.Next() {
		var i MBankAccount
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.BankID,
			&i.BranchName,
			&i.Name,
			&i.Number,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMBankAccount = `-- name: UpdateMBankAccount :one
UPDATE m_bank_accounts
SET owner_id=$2, 
    bank_id=$3, 
    branch_name=$4, 
    "name"=$5, 
    "number"=$6, 
    updated_at=now(),
    updated_by=$7
WHERE id = $1
RETURNING id, owner_id, bank_id, branch_name, name, number, created_at, created_by, updated_at, updated_by
`

type UpdateMBankAccountParams struct {
	ID         int32  `json:"id"`
	OwnerID    int32  `json:"owner_id"`
	BankID     int32  `json:"bank_id"`
	BranchName string `json:"branch_name"`
	Name       string `json:"name"`
	Number     string `json:"number"`
	UpdatedBy  int32  `json:"updated_by"`
}

func (q *Queries) UpdateMBankAccount(ctx context.Context, arg UpdateMBankAccountParams) (MBankAccount, error) {
	row := q.db.QueryRowContext(ctx, updateMBankAccount,
		arg.ID,
		arg.OwnerID,
		arg.BankID,
		arg.BranchName,
		arg.Name,
		arg.Number,
		arg.UpdatedBy,
	)
	var i MBankAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.BankID,
		&i.BranchName,
		&i.Name,
		&i.Number,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
	)
	return i, err
}
