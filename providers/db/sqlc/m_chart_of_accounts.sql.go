// Code generated by sqlc. DO NOT EDIT.
// source: m_chart_of_accounts.sql

package db

import (
	"context"
	"database/sql"
)

const createMChartOfAccount = `-- name: CreateMChartOfAccount :one
INSERT INTO m_chart_of_accounts (
    owner_id, 
    code, 
    "name", 
    description, 
    category, 
    "level",
    created_by,
    updated_by
) 
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type CreateMChartOfAccountParams struct {
	OwnerID     int32          `json:"owner_id"`
	Code        string         `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Category    int16          `json:"category"`
	Level       int16          `json:"level"`
	CreatedBy   int32          `json:"created_by"`
	UpdatedBy   int32          `json:"updated_by"`
}

func (q *Queries) CreateMChartOfAccount(ctx context.Context, arg CreateMChartOfAccountParams) (MChartOfAccount, error) {
	row := q.db.QueryRowContext(ctx, createMChartOfAccount,
		arg.OwnerID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Level,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i MChartOfAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Level,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const deleteMChartOfAccount = `-- name: DeleteMChartOfAccount :exec
UPDATE m_chart_of_accounts
SET deleted_at=now(),
    deleted_by=$2
WHERE id = $1
RETURNING id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type DeleteMChartOfAccountParams struct {
	ID        int32         `json:"id"`
	DeletedBy sql.NullInt32 `json:"deleted_by"`
}

func (q *Queries) DeleteMChartOfAccount(ctx context.Context, arg DeleteMChartOfAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteMChartOfAccount, arg.ID, arg.DeletedBy)
	return err
}

const getMChartOfAccount = `-- name: GetMChartOfAccount :one
SELECT id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_chart_of_accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMChartOfAccount(ctx context.Context, id int32) (MChartOfAccount, error) {
	row := q.db.QueryRowContext(ctx, getMChartOfAccount, id)
	var i MChartOfAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Level,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const getMChartOfAccountForUpdate = `-- name: GetMChartOfAccountForUpdate :one
SELECT id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_chart_of_accounts
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetMChartOfAccountForUpdate(ctx context.Context, id int32) (MChartOfAccount, error) {
	row := q.db.QueryRowContext(ctx, getMChartOfAccountForUpdate, id)
	var i MChartOfAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Level,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const listMChartOfAccounts = `-- name: ListMChartOfAccounts :many
SELECT id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by FROM m_chart_of_accounts
WHERE owner_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMChartOfAccountsParams struct {
	OwnerID int32 `json:"owner_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListMChartOfAccounts(ctx context.Context, arg ListMChartOfAccountsParams) ([]MChartOfAccount, error) {
	rows, err := q.db.QueryContext(ctx, listMChartOfAccounts, arg.OwnerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MChartOfAccount
	for rows.Next() {
		var i MChartOfAccount
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Code,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Level,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.UpdatedAt,
			&i.UpdatedBy,
			&i.DeletedAt,
			&i.DeletedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMChartOfAccount = `-- name: UpdateMChartOfAccount :one
UPDATE m_chart_of_accounts
SET owner_id=$2, 
    code=$3, 
    "name"=$4, 
    description=$5, 
    category=$6, 
    "level"=$7,
    updated_at=now(),
    updated_by=$8
WHERE id = $1
RETURNING id, owner_id, code, name, description, category, level, created_at, created_by, updated_at, updated_by, deleted_at, deleted_by
`

type UpdateMChartOfAccountParams struct {
	ID          int32          `json:"id"`
	OwnerID     int32          `json:"owner_id"`
	Code        string         `json:"code"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Category    int16          `json:"category"`
	Level       int16          `json:"level"`
	UpdatedBy   int32          `json:"updated_by"`
}

func (q *Queries) UpdateMChartOfAccount(ctx context.Context, arg UpdateMChartOfAccountParams) (MChartOfAccount, error) {
	row := q.db.QueryRowContext(ctx, updateMChartOfAccount,
		arg.ID,
		arg.OwnerID,
		arg.Code,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Level,
		arg.UpdatedBy,
	)
	var i MChartOfAccount
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Code,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Level,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.UpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
